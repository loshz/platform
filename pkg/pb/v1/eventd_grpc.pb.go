// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/v1/eventd.proto

package pbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventdService_Event_FullMethodName = "/proto.v1.EventdService/Event"
)

// EventdServiceClient is the client API for EventdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventdServiceClient interface {
	// Event takes host level events.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventdServiceClient(cc grpc.ClientConnInterface) EventdServiceClient {
	return &eventdServiceClient{cc}
}

func (c *eventdServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, EventdService_Event_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventdServiceServer is the server API for EventdService service.
// All implementations must embed UnimplementedEventdServiceServer
// for forward compatibility
type EventdServiceServer interface {
	// Event takes host level events.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedEventdServiceServer()
}

// UnimplementedEventdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventdServiceServer struct {
}

func (UnimplementedEventdServiceServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedEventdServiceServer) mustEmbedUnimplementedEventdServiceServer() {}

// UnsafeEventdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventdServiceServer will
// result in compilation errors.
type UnsafeEventdServiceServer interface {
	mustEmbedUnimplementedEventdServiceServer()
}

func RegisterEventdServiceServer(s grpc.ServiceRegistrar, srv EventdServiceServer) {
	s.RegisterService(&EventdService_ServiceDesc, srv)
}

func _EventdService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventdService_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventdService_ServiceDesc is the grpc.ServiceDesc for EventdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.EventdService",
	HandlerType: (*EventdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventdService_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/eventd.proto",
}
